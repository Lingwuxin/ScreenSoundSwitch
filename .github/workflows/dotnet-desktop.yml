name: Build and Release .NET Core Desktop App

on:
  push:
    branches:
      - master
  release:
    types:
      - created

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build project
        run: dotnet build --configuration Release --no-restore

      - name: Publish as single executable
        id: publish
        run: |
          dotnet publish -c Release -r win-x64 --self-contained true /p:PublishSingleFile=true
          echo "publish_dir=$(pwd)/bin/Release/net8.0-windows*/win-x64/publish" >> $GITHUB_ENV

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        run: |
          zip_file="${{ env.publish_dir }}/ScreenSoundSwitch.zip"
          Compress-Archive -Path "${{ env.publish_dir }}/*" -DestinationPath $zip_file
          echo "zip_file=$zip_file" >> $GITHUB_ENV
          echo "Uploading asset..."
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: $zip_file
            asset_name: ScreenSoundSwitch.zip
            asset_content_type: application/zip

      - name: Create Tag
        if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag "v1.0.${{ github.run_number }}"
          git push origin "v1.0.${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
